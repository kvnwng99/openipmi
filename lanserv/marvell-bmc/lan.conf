# lan.conf
# A configuration file for lanserv or ipmi_sim to configure the various
# communication parameters for the device.

# This is a name used to identify this instance, and used to create
# the default name of the emulator startup command file and eventually
# the storage facility for permanent storage.
name "AXP-SERVER"

#
# Work on the BMC first
set_working_mc 0x20

  # Define a LAN channel on channel 1 (eth1)
  startlan 1
    # Define an IP address and port to listen on.  You can define more
    # than one address/port to listen on multiple addresses.  The ::
    # listens on all addresses.
    addr 0.0.0.0 623

    # Maximum privilege limit on the channel.
    priv_limit admin

    # Allowed IPMI 1.5 authorization types
    #allowed_auths_callback none md2 md5 straight
    #allowed_auths_user none md2 md5 straight
    #allowed_auths_operator none md2 md5 straight
    #allowed_auths_admin none md2 md5 straight

    # guid for IPMI 2.0 authorization  You can also use a string
    #guid a123456789abcdefa123456789abcdef
    guid "vos92Gk2Ols901ls"

    # You can specify a BMC key for IPMI 2.0 authorization.  See the
    # spec for details.
    #bmc_key "abcdefghijklmnopqrst"

    # A program to get and set the LAN configuration of the interface.
    lan_config_program "/etc/ipmi/lancontrol eth1"
  endlan

  # Define a LAN channel on channel 2 (eth0)
  startlan 2
    # We don't define a listen address, as it is not necessary, the
    # one from channel 1 covers everything.

    # Maximum privilege limit on the channel.
    priv_limit admin

    # Allowed IPMI 1.5 authorization types
    #allowed_auths_callback none md2 md5 straight
    #allowed_auths_user none md2 md5 straight
    #allowed_auths_operator none md2 md5 straight
    #allowed_auths_admin none md2 md5 straight

    # guid for IPMI 2.0 authorization  You can also use a string
    #guid a123456789abcdefa123456789abcdef
    guid "vos92Gk2Ols901ls"

    # You can specify a BMC key for IPMI 2.0 authorization.  See the
    # spec for details.
    #bmc_key "abcdefghijklmnopqrst"

    # A program to get and set the LAN configuration of the interface.
    lan_config_program "/etc/ipmi/lancontrol eth0"
  endlan

  # Now add some users.  User 0 is invalid, user 1 is the special "anonymous"
  # user and cannot take a username.  Note that the users here are only
  # used if the persistent user config doesn't exist.
  #    # valid name      passw   priv-lim max-sess allowed-auths
  user 1 false ""        "test"  user     10       none md2 md5 straight
  user 2 true  "ADMIN"   "ADMIN" admin    10       none md2 md5 straight

#
# Target board 1
#
set_working_mc 1

  sol "/dev/ttyAS0" 115200 history=65535,backupfile=/var/ipmi_sim/solhist1 historyfru=10 nortscts

#
# Target board 2
#
set_working_mc 2

  sol "/dev/ttyAS1" 115200 history=65535,backupfile=/var/ipmi_sim/solhist2 historyfru=10 nortscts

#
# Target board 3
#
set_working_mc 3

  sol "/dev/ttyAS2" 115200 history=65535,backupfile=/var/ipmi_sim/solhist3 historyfru=10 nortscts

#
# Target board 4
#
set_working_mc 4

  sol "/dev/ttyAS3" 115200 history=65535,backupfile=/var/ipmi_sim/solhist4 historyfru=10 nortscts

#
# Target board 5
#
set_working_mc 5

  sol "/dev/ttyAS4" 115200 history=65535,backupfile=/var/ipmi_sim/solhist5 historyfru=10 nortscts

#
# Target board 6
#
set_working_mc 6

  sol "/dev/ttyS1" 115200 history=65535,backupfile=/var/ipmi_sim/solhist6 historyfru=10 nortscts


# Allow a console connection to perform emulation commands.
#console localhost 9000

# Dynamically load a module to extend the simulator.  After the module is
# loaded, if the function "ipmi_sim_module_init" is defined in the module,
# it will be called with the following parameters:
#  int ipmi_sim_module_init(sys_data_t *sys, char *initstr);
# where initstr is the init string passed on the module load line.
# It should return 0 on success or an errno no failure.
loadlib "/usr/lib/ipmi_sim/marvell_mod.so" ""
