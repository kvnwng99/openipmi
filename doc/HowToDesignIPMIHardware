

                    How to design IPMI hardware


The world of IPMI promises to make things much easier for everyone
involved in system maintenance, but the world of IPMI has a long way
to go to reach maturity.  This means that people don't know how to
build IPMI things properly, and until the tribal knowledge of this
system develops, things will not run smoothly.

In this document, I attempt to explain how I think the IPMI spec
should be applied to system design.  I do this as a user, as someone
who has studied the spec and designed drivers and libraries.  I have
seen several IPMI designs and seen things done right and wrong, and I
want things done right.  In other words, I am attempting to kick-start
the common knowledge of how hardware designers should design IPMI
systems.

The author of this document does not mean to be condescending.  But
there are a lot of things that system designers do that save
themselves a little work but cost a lot of software work.  People who
write software don't like working on things that don't directly make
them money.  If you think I am wrong about something, I suggest you
think very hard about it.  I might be wrong, but I am looking at
things from a much more user-centric point of view.

I also want to make your job easier.  Let's face it, system design is
hard work.  Software design is hard work.  Being good at both is close
to impossible.  Everyone's life will be better if the system designers
can focus on designing good systems and can leverage the work of
standards-compliant software.


Learn the spec
--------------

Even though it goes without saying, I'm going to say it because nobody
does it.  Understand the spec.  Understand the philosophy behind it.
Read it.  The whole thing.

The spec is not a tool designed to help you understand IPMI.  It does
a fairly good job of codifying the details of how to accomplish
things, but it does not do a good job of explaining what IPMI is all
about.  The Ada specifications include a rationale document that
explains how the designers of the standard expect the system to be
used.  It's nice to read.  IPMI has no such document.  The information
is hidden in the document, but until IPMI matures, it has to be
extracted by work.


Entities and sensors
--------------------

From the user's point of view, IPMI is all about entities and sensors.
That's all the user cares about.  They don't care about management
controllers, or IPMB addresses, or device IDs or anything like that.
They consider those extraneous details.  They want to know the things
they are managing, and the state of those things.  It's like IP.  The
average user doesn't care about Ethernet addresses, or IP addresses,
or transport protocols.  They care about URLs and content.

Sensors have traditionally been analog measurement devices.  Wisely,
the designers of IPMI decided to go far beyond that.  IPMI threshold
sensors take analog measurements.  But another whole class of sensors,
discrete sensors, sense events, states, and other discrete things.
For instance, you can have a BIOS sensor that lets you monitor and
query the current state of the BIOS.  Button sensors let you detect
when buttons are pressed.  Slot sensor can detect when power is
applied to a slot and when the user requests that the device be
removed from the slot.

Entity presence sensors are one very important type of discrete
sensor.  If an entity can be removed, you should have a presence
sensor for it.  That way, it's easy and reliable to detect if the
device is present or not.


Everything through IPMI
-----------------------

Make every maintenance action available through IPMI, even if you have
to define OEM commands for it.  For instance, if you have a CompactPCI
system, don't require the user to light the blue light (or any other
light, really) through the CompactPCI bus.  Instead, light the blue
light through IPMI.  In a PICMG 2.16 system, for instance, you won't
be able to light the blue light at all!  If the maintenance system
comes in through an external interface such as an IPMI LAN interface
or an ICMB interface, then it won't be able to control the device.
Every maintenance operation should be handled through IPMI.


As standard as possible
-----------------------

I've seen many people who decided that a standard wasn't good enough
and attempted to build something better.  Ironically, nine times out
of ten they end up with something that is worse than the
specification.  Although specifications can be ugly, the people who
design them generally know what they are doing and have reasons for
seemingly odd decisions.  And it's extraordinarily hard to design an
interface well.  If someone else has done the design work for you,
take advantage of it!

Plus, not following standards is a recipe for shooting yourself in the
foot.  Imagine a computer manufacturer today who decides that IDE,
SCSI, Fiberchannel, Firewire, none of them are good enough.  They are
going to design their own disk interface and it will be the best in
the world.  Those standards all suck.

First of all, they will most likely fail.  The system that was
supposed to be so much better will really suck much worse than the
standards.  They will get caught in the mire of all the details they
they really have no business dealing with.  I've been there, and I
don't want to be there again unless I have to.

Second of all, nobody will buy their systems.  Even, if by some odd
chance, it ends up better than the competition, they have sunk untold
amounts of money in this, and it will cost a lot more.  And the
customers will not be happy about having a single source of disk
drives that are non-standard.

Sometimes you do get into situations where standards are not good
enough.  That should be a decision made with much fear and
trepidation.  You are journeying into the unknown wilderness, and the
edge of the world may be near.

In the world of IPMI, the more closely you follow the standard, the
easier it will be for customers to get off-the-shelf middleware that
can use it.  This lowers their developement cost and their long-term
maintenance cost.  They can take software like OpenIPMI and simply
plug it into their system.

There are, of course, things missing in IPMI.  It (for some bizarre
reason) doesn't define any output devices like LEDs or relays.  You
will have to write your own OEM commands to control those devices.
But be ready to move when the standards are ready.

And don't add extensions that are required beyond the spec to do
otherwise standard operations.  It's ok to define OEM operations for
things not specified by the spec, and it's ok to have value-add.  But
I saw one design that required a special lock on the SEL; it was
supposed to help with multi-user access.  Not only did the special
lock not really work, but it required special non-standard code to be
added to something that should have been completely standard.  It
meant that standards-compliant software could not use it.


IPMB messages from an interface to an MC's local address should work
--------------------------------------------------------------------

To make things as consistent as possible, when a messages is sent on
an interface (including SMI, LAN, and the various serial interface) to
the IPMB address of the MC on that interface, the MC should respond.
This is not so important in server systems, but in blade-based systems
it is quite helpful.  This way, a piece of software can talk to
something on the IPMB bus and doesn't have to have special code to
know that it is talking directly to the MC that has the address.

Consider, for instance, if you have a blade based system.  One of the
blades may house the BMC.  If you have software that comes in through
interfaces and talks to the BMC, you don't have to have any special
code to detect if you are the BMC.  You just send to address 0x20, and
you are happy.  Imagine on an IP system if you had to go through
special code to talk to your own system.  It would be a big pain.  And
it's not that hard to accomplish.


Make a commitment to be current
-------------------------------

The IPMI spec is currently 1.5.  There is no reason to produce 1.0
hardware.  Make a commitment to stay current with the spec.  The new
specs define new sensor types and allow you to remove old,
OEM-specific sensors.  As the spec moves forward, stay current, or you
will be left behind.


Put all sensors in device SDR
-----------------------------

Don't put sensors in the main SDR repository.  Put them in device SDR
repositories.  There are two reasons for this:

1) The main SDR repository is writable.  Something could come in and
   and destroy the sensor information.  The device SDR repositories
   are read-only.  The sensors are not going anywhere, so they should
   be read-only.

2) If you have a removable device, you need to change the entity
   instance for a sensor.  For instance, in a PICMG 2.16 system, you
   can plug a card in most any slot.  Each card may have it's own set
   of sensors, and those sensors will certainly vary from card to
   card.  You can't really put the sensors in the main SDR repository
   because they may vary depending on the type of card installed and
   where it is installed.  All cards cannot use the same entity
   instances, they will have to change their instances based upon
   their position.  You can't do this in the main SDR repository,
   those entries are controlled by the management system.

The main SDR repository should really be for Entity Association
records and for other things that the management system needs.  It
should not be for anything else.

Systems may use the main SDR repository to vary the initialization of
the of the various sensors (the BMC reads it's SDR repository and
configures the sensors based upon what it finds).  This is fine for
server systems, but it doesn't make as much sense for blade-based
systems.  Plus, there should really be a special SDR for this purpose,
not a general type.

In fact, I will go so far as to say that the whole concept of a main
SDR should go away and everything should be in device SDRs.
Especially in systems with dual alarm cards, the concept of a main SDR
is rather difficult to implement.  Plus, the function of the main SDR
is to tell the BMC how to initialize the sensors.  This is a bad idea
in continuously available systems with hot-swappable alarm cards; the
management system should be responsible for the configuration of the
sensors.


Don't dynamically change the capabilities of an MC
--------------------------------------------------

In some blade-based systems, one card can ``take on'' the BMC address
of 0x20.  I think this is a bad idea (I talk about this later), but
it's even worse if you change the capabilities of the MC based upon
whether it is at address 0x20 or not.  If the MC can be an event
receiver, it should *always* be an event receiver.  Doing otherwise
complicates the design of the software that uses it, and makes it more
difficult to design general software for the system.


Blade-based system shouldn't have a BMC
---------------------------------------

In chassis-based systems, it makes sense to have a BMC at address
0x20.  In blade-based systems, this makes no sense.  First of all, the
*only* reason the author can see to have a BMC at address 0x20 is to
have a standard place to send events.  However, the standard has a
required command for event generators that lets you send the eventing
address to any IPMB address you like.  Use that instead of address
0x20.

Some systems have a way for a blade to take over address 0x20, and
have a backup BMC.  This is trying to fit a square peg into a round
hole.  First of all, the configuration for this is non-standard, and
it makes the management software more complex because it has to manage
which card is active and which is standby.  More on this later, too.

Instead, each card should sit at it's own address (as defined by PICMG
2.9 or whatever).  Management software can pick an interface and use
the set event receiver command to tell the controllers in the system
where to send their events.


FRU Information
---------------

To me, the most sensible information to handle FRU information is to
put it on the FRU itself.  On intelligent FRUs (that have MCs on them)
the MC should be an FRU Inventory Device that holds the FRU
information for that FRU and any sub-FRUs, expecially if the FRU is
dynamically swappable (A board in a CPCI system, for instance).  It
seems to make sense for non-intelligent FRUs to have an I2C EEPROM
chip on them that holds their FRU information.

Each FRU in the system should have a Type 11 SDR (FRU Device Locator
Record, or FDLR) or a Type 12 SDR (Management Controller Device
Locator Record, or MCDLR) in the appropriate FRU Inventory Device.


Things currently missing from the standard
------------------------------------------

IMHO, the biggest hole in the standard is output devices.  The
standard should at least define lights, relays, and alarms as output
devices, and appropriate SDR entries for them.

The second biggest is that there is no way to get your own local IPMB
address.  For blade-based systems, this is critical.

There is no standard way to map an event/presence sensor to the
existance of an MC.  A standard mapping would be very nice.

There is no way to send an arbitrary event types as events.  You can
only send "standard" events with the "Platform Event Message Command",
it would be very handy to be able to send any event type you wanted,
so you could generate OEM events and the like.  You can add it to the
SEL directly, but that's kind of a pain.

For blade-based chassis, there is no mapping for entity instances.
The last errata for the spec defined blades and switches (a welcome
addition).  PICMG 2.9 defines the Management Controller IPMB
addresses, but those are really not what the user cares about.  They
care about the entity instances.

The user cares about this because it gives them a consistent view of
the system.  The chassis holding the blades should define a slot
sensor and a presence sensor to monitor the slot.  It would be very
nice if the sensors on the board itself could use the same entity ID
and instance.  Sure, you can define an entity association record to
show the containment, but that's kind of a pain.

The watchdog timer should be able to run from startup.  That way, if
the OS hangs before getting to setting up the watchdog timer, the
system will still be reset.


Multi-access to the same bus (fault-tolerant IPMI)
--------------------------------------------------

In blade-oriented systems, some may want multiple devices to be able
to act as the BMC in the system, for fault-tolerance reasons.  You can
accomplish this in a number of ways.

The first question to ask is if you *really* need this.  The author
has worked on a system with a target reliability of seven 9's, and
each chassis only had one alarm card.  Even on a system where
redundant copies of the application are in the same chassis, that
means the BMC interface has to fail and the two redundant cards have
to fail.  I think that if you do the analysis, you will discover that
you don't need the extra cost and complexity (don't forget that
complexity means reduced reliability) that multiple BMC interfaces
bring.

You may think ``Hey what if events get lost''.  Well, if you lose a
connection to a BMC, you are going to rescan the current state of the
system to be sure your state is correct.  So if you missed any events,
you will catch the problem in the current state of the system.

But perhaps I am not convincing enough, or you can't convince your
customers that they really only need one BMC interface.

It's important to remember that the system will generally have
multiple external management systems talking to it.  It makes things a
lot less complicated if the management systems do not have to
coordinate information between themselves.  They may not even be able
to do this because they have independent outputs or purposes or are
independent pieces of software.

Some systems have MCs on a normal card in the system.  The management
system (or perhaps some proxy) runs on the card.  The external
management system shouldn't have to know which card is active.  In
effect, the cards should both be active.  There can only be one event
receiver.  The management systems can set the event receiver for all
the MCs in the system using the set event receiver command.  Anything
listening for events can listen to all the MCs capable of being an
event receiver.  It doesn't matter which MC the event comes from.

Systems with separate alarm cards should basically be configured the
same way.  Both cards should be fully active all the time, and the
event receiver should be set by management software.

Multiple external systems can listen for events with this scenario,
and no coordination is required if they follow a simple protocol.
Each external system can listen for events.  When an event comes in,
the systems will start a timer, and after the timer goes off they will
delete the event.  The timer should be long enough to allow everyone
to see the events, and everything will work smoothly.


How to Implement Hot-Swap
-------------------------

The spec doesn't have a section on how to implement hot-swap.  This is
unfortunate, because that's a rather important function.

First, how-swap and FRU detection should be done with a slot sensor or
a presence sensor, preferably a presence sensor.  Hot-swap requests
should come in via a slot sensor.

Second, hot-swap devices should have a Management Controller Device
Locator Record or a FRU Device Locator Record in the device SDRs of
the device that manages hot-swap (see the FRU Information section of
this document).

Lastly, you must implement some OEM way in IPMI to light the hot-swap
indicator.
