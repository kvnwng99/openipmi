
 1) Detection of entity presence is far too complicated.  Specifically,
    the handling of the "FRU device" detection is vague.  Does this
    mean a management controller is present or not present?  Does it
    mean that the mangement software should send a FRU inventory
    message to the FRU device and it gets an error?  If the latter is
    true, then there should be a standard 8xh return code from the FRU
    inventory saying that it is not present.

 2) The description of the LAN interface/IPMB bridging is far too
    vague.  Most systems I have seen send two messages back for one
    sent.  It doesn't say this anywhere.  A simple diagram with
    exactly how an IPMB-bridged (and system-interface bridged for that
    matter) works would make a world of difference.  IMHO, the most
    efficient and effective method would be one send and one response
    with the full response carried in the response.  Getting two
    messages back from the BMC is inefficient and confusing for every
    piece involved.

 3) In a type 1 SDR, byte 21 (Sensor Units 1), the data format of 11b
    means that it does not return a numeric value.  However, this means
    that you cannot interpret all the data field that come later, like
    the minimums and maximums and thresholds.  Does setting the data
    format to 11b mean that these field are not applicable?  How does
    this work?

 4) There is no reliable way to detect if the IPMI controller has
    issued an NMI due to a watchdog pretimeout.  You can't send a
    message to the IPMI controller in an NMI handler; you need a
    register that you can directly read to tell you this.  This makes
    using the NMI pretimeout very risky.

 5) In type 9 SDRs, in the entity device address fields, it states that
    it is "Set to 00h if Instace ID is device-relative".  This is
    almost certainly a mistake.  It should be system-relative, not
    device-relative.

 6) There is no way to read the user session limit (set by the set user
    access command)

 7) Although IPMI supports unicode names, there doesn't seem to be a
    way to get the language that the data is in.

 8) There is no explanation of what "decide is accessed by words" means
    in the FRU inventory device commands.

 9) SNMP traps generated as defined by IPMI do not contain enough
    information to correctly identify the sensor.

10) There is no way to set the SNMP trap destination port.

11) There does not appear to be a way to clear the SEL overflow flag
    once it is set.  The operation of that flag (when set, how
    cleared) is not defined.

12) There appears to be no way to get the session limit or the enable
    value for IPMI users. 

13) There is no way to get an event to know immediately if data has
    changed (lanparm, PEF, FRU, but mostly SDRs, especially device
    SDRs).

14) There is no way to describe an entity unless it is a FRU, MC, or
    generic.  A general entity description record would be nice.

15) Manual rearm sensors are crazy.

16) The whole concept of software ids (SWIDs) is half-baked and
    probably needs to be removed.

17) There is no locking of FRU data to support multiple
    readers/writers.

18) FRU data has no "last write time", so you have no way to know if
    it has changed since the previous reading of it.

19) There is no way to query the BMC's local IPMB address.  In bladed
    systems, it may not be 20h.

RMCP+ questions
---------------

* In the authentication and integrity algorithm numbers (section 13.28
  and 13.28.4), it lists c0h-ffh as the OEM types, but the range of
  those numbers is from 0-3fh.  I assume the oem range should be
  30h-3fh (like the encrytion numbers in 13.28.5)

* In the xRC4 algorithm, it is supposed to re-initialize the algorithm
  if a 0 data offset is received.  What happens if packet with the 0
  data offset is lost?  That would seem to me to be a very bad thing,
  the connection would certainly drop if that happened.

* In RMCP+, what are the sequence numbers initialized to?

* What data does the RMCP+ payload length cover?  It seems the most
  reasonable range is from the confidentiality header up to (and
  including) the integrity pad length, but it doesn't say.

* For the RMCP+ integrity data, what is the the range of the data for
  the HMAC algorithms?  The data is stated for MD5-128, but not for
  the HMAC algorithms.

* After the RAKP algorithm completes, then what?  Do you have to do a
  set privilege level to start things off?

* For the integrity algorithms, for HMAC-MD5-128 and MD5-128,
  shouldn't the keys be 128 bits?  Do you truncate the last 4 bytes
  of the password for MD5-128?  And for generation of SIK, do you
  truncate the BMC key to 16 bytes for the RAKP-HMAC-MD5?

* What should one do with an unencrypted message recieved on an
  encrypted session?  The integrity has a setting whether to accept
  these, but the encryption does not.

* In the session id in the example LAN packet (table 13-8 in the 2.0
  spec), there are two sessions ids, but it is not indicated which
  session id is used in the message header.

* For AES-CBC-128, it is not indicated whether the padding
  to 16 bytes is part of the AES spec or is something in
  addition to the AES spec.  I have found that AES adds
  a padding like this (from the OpenSSL spec, at least)
  and I'm not sure if I need to add another one.
